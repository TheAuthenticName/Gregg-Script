-- Get Config Settings
local Config = {
    Enabled = getgenv().Config.Enabled,
    Settings = {
        ResetOnGregg = getgenv().Config.Settings.ResetOnGregg,
        ResetInYokai = getgenv().Config.Settings.ResetInYokai,
        ResetInOptimalLocations = getgenv().Config.Settings.ResetInOptimalLocations,
        ShowMaterials = getgenv().Config.Settings.ShowMaterials
    },
    AutoConfiguration = {
        Enabled = getgenv().Config.AutoConfiguration.Enabled,
        Key = getgenv().Config.AutoConfiguration.Key,
        Settings = {
            AvgPingPerAccount = getgenv().Config.AutoConfiguration.AuroraWareSettings.AvgPingPerAccount,
            DisableDodging = getgenv().Config.AutoConfiguration.AuroraWareSettings.DisableDodging
        }
    },
    WebhookSettings = {
        Enabled = getgenv().Config.WebhookSettings.Enabled,
        DisplayName = getgenv().Config.WebhookSettings.DisplayName,
        Url = getgenv().Config.WebhookSettings.Url
    }
}

-- Disable Script if disabled
if Config.Enabled == false then
    return
end

-- Auroraware Configs
local YokaiConfig = {
    Mobs = {
        LimitSpellCasting = true,
        Distance = 20,
        Teleports = {
          Enabled = true,
          Distance = 20,
          Delay = 0.1
        },
        AbilityRange = 50
      },
      Miscellaneous = {
        AggressiveMode = true,
        AutoRetryDungeon = true,
        DisableDodging = false
      },
      CastBetweenEnemies = {
        Enabled = true,
        CastingRange = 80
      },
      Boss = {
        LimitSpellCasting = false,
        Distance = 50,
        Teleports = {
          Enabled = true,
          Distance = 20,
          Delay = 0.1
        },
        AbilityRange = 70
      },
}

local GildedConfig = {
    Mobs = {
        LimitSpellCasting = true,
        Distance = 40,
        Teleports = {
            Enabled = true,
            Distance = 20,
            Delay = 0.1
        },
        AbilityRange = 60
    },
    Miscellaneous = {
        AggressiveMode = true,
        AutoRetryDungeon = true,
        DisableDodging = false
    },
    CastBetweenEnemies = {
        Enabled = true,
        CastingRange = 80
    },
    Boss = {
        LimitSpellCasting = false,
        Distance = 60,
        Teleports = {
            Enabled = true,
            Distance = 20,
            Delay = 0.1
        },
        AbilityRange = 87
    }
}

local NorthernConfig = {
    Mobs = {
        LimitSpellCasting = true,
        Distance = 50,
        Teleports = {
            Enabled = true,
            Distance = 20,
            Delay = 0.1
        },
        AbilityRange = 60
    },
    Miscellaneous = {
        AggressiveMode = true,
        AutoRetryDungeon = true,
        DisableDodging = false
    },
    CastBetweenEnemies = {
        Enabled = true,
        CastingRange = 80
    },
    Boss = {
        LimitSpellCasting = false,
        Distance = 70,
        Teleports = {
            Enabled = true,
            Distance = 20,
            Delay = 0.1
        },
        AbilityRange = 87
    },
}

-- Material table
local Materials = {
    ["Astral Amethyst"] = 0,
    ["Gold Bar"] = 0,
    ["Obsidian Chunk"] = 0,
    ["Warforged Metal"] = 0
}

-- Material Maps
local AmethystMaps = {"Yokai Peak", "Aquatic Temple", "Ghastly Harbor", "King's Castle"}
local GoldMaps = {"Gilded Skies", "Volcanic Chambers", "The Canals", "Pirate Island"}
local ObsidianMaps = {"Northern Lands", "Orbital Outpost", "Samurai Palace", "Winter Outpost"}
local MetalMaps = {"Enchanted Forest", "Steampunk Sewers", "Underworld", "Desert Temple"}

-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- Variables
local Player = Players.LocalPlayer
local PlayerGui = Player.PlayerGui

local dungeon
local dungeonName

local Amount
local Material
local Total

local Json
local Mobs
local Miscellaneous
local CastBetweenEnemies
local Boss

-- Functions
local function WriteData()
    Json = HttpService:JSONEncode(Materials)
    writefile("GreggTracker/Config.json", Json)
end

local function ReadData()
    Json = HttpService:JSONDecode(readfile("GreggTracker/Config.json"))
end

local function WriteConfigData(ConfigName)
    Json = HttpService:JSONDecode(readfile("AuroraWareV3/Configuration/Settings.json"))

    -- Mob Config
    Json.BaseAutoFarm.Mobs = ConfigName.Mobs
    Mobs = HttpService:JSONEncode(Json)
    writefile("AuroraWareV3/Configuration/Settings.json", Mobs)

    -- Misc Config
    Json.BaseAutoFarm.Miscellaneous = ConfigName.Miscellaneous
    Miscellaneous = HttpService:JSONEncode(Json)
    writefile("AuroraWareV3/Configuration/Settings.json", Miscellaneous)

    -- Casting Config
    Json.BaseAutoFarm.CastBetweenEnemies = ConfigName.CastBetweenEnemies
    CastBetweenEnemies = HttpService:JSONEncode(Json)
    writefile("AuroraWareV3/Configuration/Settings.json", CastBetweenEnemies)

    -- Boss Config
    Json.BaseAutoFarm.Boss = ConfigName.Boss
    Boss = HttpService:JSONEncode(Json)
    writefile("AuroraWareV3/Configuration/Settings.json", Boss)
end

local function ReadMaterials()
    for index, value in pairs(Materials) do
        print(`{index}: {value}`)
    end
end

local function LoadAuroraware()
    getgenv().Key = Config.AutoConfiguration.Key
    loadstring(request({Url='https://api.dungeonquestroblox.com/Files/Auroraware-dq'}).Body)()
end

local function ResetPlayer()
    Player.Character.Humanoid.Health = 0
    while task.wait() do
        if game.Players.LocalPlayer.PlayerGui.RevivePrompt.Enabled then
            game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack({[1] = {[1] = {["\3"] = "closeRevive"}, [2] = "\13"}}))
        end
        if game.Players.LocalPlayer.PlayerGui.RetryVote.Enabled then
            game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer(unpack({[1] = {[1] = {["\3"] = "vote", ["vote"] = true}, [2] = "\28"}}))
        end
    end
end

local function DisplayMaterials()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = Player.PlayerGui
    ScreenGui.Enabled = true

    local Frame = Instance.new("Frame")
    Frame.Parent = ScreenGui
    Frame.AnchorPoint = Vector2.new(.5, .5)
    Frame.Position = UDim2.fromScale(.13, .275)
    Frame.Size = UDim2.fromScale(.2, .2)
    Frame.BorderSizePixel = 0

    local AmethystLabel = Instance.new("TextLabel")
    AmethystLabel.Parent = Frame
    AmethystLabel.Position = UDim2.fromScale(0, 0)
    AmethystLabel.Size = UDim2.fromScale(1, .2)
    AmethystLabel.Text = `Astral Amethyst: {Materials["Astral Amethyst"]}`
    AmethystLabel.TextScaled = true
    AmethystLabel.FontFace.Bold = true
    AmethystLabel.TextXAlignment = Enum.TextXAlignment.Left
    AmethystLabel.BorderSizePixel = 0

    local GoldLabel = Instance.new("TextLabel")
    GoldLabel.Parent = Frame
    GoldLabel.Position = UDim2.fromScale(0, .2)
    GoldLabel.Size = UDim2.fromScale(1, .2)
    GoldLabel.Text = `Gold Bar: {Materials["Gold Bar"]}`
    GoldLabel.TextScaled = true
    GoldLabel.FontFace.Bold = true
    GoldLabel.TextXAlignment = Enum.TextXAlignment.Left
    GoldLabel.BorderSizePixel = 0

    local ObsidianLabel = Instance.new("TextLabel")
    ObsidianLabel.Parent = Frame
    ObsidianLabel.Position = UDim2.fromScale(0, .4)
    ObsidianLabel.Size = UDim2.fromScale(1, .2)
    ObsidianLabel.Text = `Obsidian Chunk: {Materials["Obsidian Chunk"]}`
    ObsidianLabel.TextScaled = true
    ObsidianLabel.FontFace.Bold = true
    ObsidianLabel.TextXAlignment = Enum.TextXAlignment.Left
    ObsidianLabel.BorderSizePixel = 0

    local MetalLabel = Instance.new("TextLabel")
    MetalLabel.Parent = Frame
    MetalLabel.Position = UDim2.fromScale(0, .6)
    MetalLabel.Size = UDim2.fromScale(1, .2)
    MetalLabel.Text = `Warforged Metal: {Materials["Warforged Metal"]}`
    MetalLabel.TextScaled = true
    MetalLabel.FontFace.Bold = true
    MetalLabel.TextXAlignment = Enum.TextXAlignment.Left
    MetalLabel.BorderSizePixel = 0
end

local function Webhook()
    local data, url
    task.spawn(function()
        url = Config.WebhookSettings.Url
        data = {
            ["embeds"] = {
                {
                    ["title"] = "Gregg Defeated",
                    ["color"] = tonumber(string.format("0x%X", math.random(0x000000, 0xFFFFFF))),
                    ["type"] = "rich",
                    ["fields"] = {
                        {
                            ["name"] = "Information",
                            ["value"] = `Name: {Player.Name}\nDungeon: {dungeonName}`,
                        },
                        {
                            ["name"] = "Material Information",
                            ["value"] = `Material Type: {Material}\nAmount Added: {Amount}\nTotal Amount: {Total}`
                        }
                    },
                    ["footer"] = {
                        ["icon_url"] = "https://cdn.discordapp.com/avatars/1140186977359102053/1919becaa00c6edf63a35633ba6608d9",
                        ["text"] = "Fuck Off Gregg"
                    }
                }
            }
        }
        repeat
            task.wait()
        until data
        local newdata = HttpService:JSONEncode(data)
        local headers = {
            ["Content-Type"] = "application/json"
        }
        local request = http_request or request or HttpPost or http.request
        local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
    end)
end

local function GreggDied()
    print("Reset's when Gregg dies!")
    game.Workspace.DescendantRemoving:Connect(function(descendant)
        if descendant.Name == "Gregg" then
            task.wait(0.5)
            Amount = PlayerGui.CrossDungeonGregg.greggRewards.Material.TextLabel.Text

            for index, value in pairs(AmethystMaps) do
                if dungeonName == value then
                    
                    Material = "Astral Amethyst"
                    Materials["Astral Amethyst"] += string.sub(Amount, 2)
                    Total = Materials["Astral Amethyst"]

                    WriteData()
                end
            end

            for index, value in pairs(GoldMaps) do
                if dungeonName == value then
                    
                    Material = "Gold Bar"
                    Materials["Gold Bar"] += string.sub(Amount, 2)
                    Total = Materials["Gold Bar"]

                    WriteData()
                end
            end

            for index, value in pairs(ObsidianMaps) do
                if dungeonName == value then
                    
                    Material = "Obsidian Chunk"
                    Materials["Obsidian Chunk"] += string.sub(Amount, 2)
                    Total = Materials["Obsidian Chunk"]

                    WriteData()
                end
            end

            for index, value in pairs(MetalMaps) do
                if dungeonName == value then
                    
                    Material = "Warforged Metal"
                    Materials["Warforged Metal"] += string.sub(Amount, 2)
                    Total = Materials["Warforged Metal"]

                    WriteData()
                end
            end
            if Config.WebhookSettings.Enabled == true then
                Webhook()
            end
            ResetPlayer()
        end
    end)
end

-- Lobby Shit
if game.PlaceId == 2414851778 then
    LoadAuroraware()

    local CraftingMenu = PlayerGui:WaitForChild("CraftingUI"):WaitForChild("Main"):WaitForChild("Topbar")

    task.wait(3)

    for index, value in pairs(Materials) do
        Materials[index] = tonumber(CraftingMenu:FindFirstChild(index).TextLabel.Text)
    end

    ReadMaterials()

    if not isfolder("GreggTracker") then
        warn("No folder found, Creating one!")
        makefolder("GreggTracker")
    else
        warn("Found folder!")
    end

    if not isfile("GreggTracker/Config.json") then
        warn("No config file found, Creating one!")
        WriteData()
    else
        warn("Found config file!")
        WriteData()
    end
end

-- Dungeon Shit
if game.PlaceId == 14363263080 then
    dungeon = game.Workspace:WaitForChild("dungeon")
    dungeonName = game.Workspace:WaitForChild("dungeonName").Value

    -- Auto Config Shit
    if Config.AutoConfiguration.Enabled == true then
        if dungeonName == "Yokai Peak" then

            if Config.AutoConfiguration.Settings.AvgPingPerAccount >= 100 then
                YokaiConfig.Mobs.Teleports.Delay = 0.2
                YokaiConfig.Boss.Teleports.Delay = 0.2
                YokaiConfig.Boss.Teleports.Distance = 16
            end

            WriteConfigData(YokaiConfig)

        elseif dungeonName == "Gilded Skies" then

            if Config.AutoConfiguration.Settings.AvgPingPerAccount >= 100 then
                GildedConfig.Mobs.Teleports.Delay = 0.2
                GildedConfig.Boss.Teleports.Delay = 0.2
                GildedConfig.Boss.Teleports.Distance = 16
            end

            WriteConfigData(GildedConfig)

        elseif dungeonName == "Northern Lands" then

            if Config.AutoConfiguration.Settings.AvgPingPerAccount >= 100 then
                NorthernConfig.Mobs.Teleports.Delay = 0.2
                NorthernConfig.Boss.Teleports.Delay = 0.2
                NorthernConfig.Boss.Teleports.Distance = 16
            end

            WriteConfigData(NorthernConfig)
        end
    end

    LoadAuroraware()

    -- Getting Materials
    if isfile("GreggTracker/Config.json") then
        ReadData()
        for index, value in pairs(Json) do
            Materials[index] = value
        end
    else
        Player:Kick("No config file found!")
    end

    ReadMaterials()

    if Config.Settings.ShowMaterials == true then
        DisplayMaterials()
    end

    -- Gegg Settings
    if dungeonName == "Yokai Peak" and Config.Settings.ResetInYokai == true then
        GreggDied()
    elseif Config.Settings.ResetOnGregg == true and dungeonName ~= "Yokai Peak" then
        GreggDied()
    else
        print("Will not reset when gregg dies")
    end

    if Config.Settings.ResetInOptimalLocations == true then
        if dungeonName == "Samurai Palace" then
            game.Workspace.DescendantAdded:Connect(function(descendant)
                if descendant.Name == "Sanada Yukimura" then
                    ResetPlayer()
                end
            end)
        elseif dungeonName == "Steampunk Sewers" then
            dungeon.room4.DescendantAdded:Connect(function(descendant)
                if descendant.Name == "Hammer Bot" then
                    ResetPlayer()
                end
            end)
        elseif dungeonName == "Orbital Outpost" then
            game.Workspace.DescendantAdded:Connect(function(descendant)
                if descendant.Name == "Tesla Master" then
                    ResetPlayer()
                end
            end)
        elseif dungeonName == "Volcanic Chambers" then
            dungeon.room8.DescendantAdded:Connect(function(descendant)
                if descendant.Name == "Aggressive Lava Walker" then
                    ResetPlayer()
                end
            end)
        elseif dungeonName == "Enchanted Forest" then
            game.Workspace.DescendantAdded:Connect(function(descendant)
                if descendant.Name == "Crystal Golem" then
                    ResetPlayer()
                end
            end)
        elseif dungeonName == "Gilded Skies" then
            game.Workspace.DescendantAdded:Connect(function(descendant)
                if descendant.Name == "General Cragg" then
                    ResetPlayer()
                end
            end)
        end
    end
end

print("Loaded")
